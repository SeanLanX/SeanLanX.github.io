<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java日期字符串转Date类型，并获取int类型年月日</title>
      <link href="2021/04/23/java%E6%97%A5%E6%9C%9F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%ACDate/"/>
      <url>2021/04/23/java%E6%97%A5%E6%9C%9F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%ACDate/</url>
      
        <content type="html"><![CDATA[<p>这篇文章讲解了如何将字符串格式的日期转换为Date类型，并且获取int类型的年月日</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Date对象</span></span><br><span class="line">Date date=<span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//设置字符串输入的格式,大写M代表月份</span></span><br><span class="line">SimpleDateFormat format=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="comment">//待转换的日期字符串</span></span><br><span class="line">String strTime=<span class="string">&quot;2021-04-23&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这一步就将String类型的日期“2021-04-23”转换成了Date类型</span></span><br><span class="line"><span class="comment">//注意这里需要用try catch</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    date=format.parse(strTime);</span><br><span class="line">&#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取int类型的年月日</span></span><br><span class="line"><span class="comment">//之前的date.getYear()已经过时，所以现在采用获取Calendar实例</span></span><br><span class="line">Clendar cal=Calendar.getInstance();</span><br><span class="line">cal.setTime(date);<span class="comment">//这里的date参数就是上面使用日期字符串转换得到的</span></span><br><span class="line"><span class="keyword">int</span> year=cal.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> month=cal.get(Calendar.MONTH)+<span class="number">1</span>;<span class="comment">//注意，月份需要+1</span></span><br><span class="line"><span class="keyword">int</span> day=cal.get(Calendar.DAY_OF_MONTH);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse字体颜色背景相关设置</title>
      <link href="2021/04/22/Eclipse%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%83%8C%E6%99%AF%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/04/22/Eclipse%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%83%8C%E6%99%AF%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="效果如图"><a href="#效果如图" class="headerlink" title="效果如图"></a>效果如图</h3><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422140041.png" alt="image-20210422140041328" style="zoom:50%;" /><h3 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h3><p>点击Window菜单，进入Preferences</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422111226.png" alt="image-20210422111226562" style="zoom:50%;" /><p>进入Java→Editor→Syntax Coloring，然后就选择自己要改的字体</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422111417.png" alt="image-20210422111417141" style="zoom:50%;" /><p>这里记录一下我自己的配置</p><p>return关键字</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422111611.png" alt="image-20210422111611258" style="zoom: 50%;" /><p>其他关键字</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422111650.png" alt="image-20210422111650803" style="zoom: 50%;" /><p>局部变量</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422111730.png" alt="image-20210422111730219" style="zoom: 50%;" /><p>字符串</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422133936.png" alt="image-20210422133936918" style="zoom: 50%;" /><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>主题采用的是DevStyle的Light Green主题</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422111856.png" alt="image-20210422111856358" style="zoom: 50%;" /><p>下载DevStyle可以前往Help→Eclipse Marketplace下载</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422111949.png" alt="image-20210422111949484" style="zoom:50%;" /><p>直接在搜索框搜索DevStyle，下载后一直next安装即可</p><h4 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h4><p>背景颜色按下图前往设置</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422112300.png" alt="image-20210422112300101" style="zoom:50%;" /><p>颜色参数为</p><p>色调：85</p><p>饱和度：123</p><p>亮度：205</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>更换电脑个人博客转移</title>
      <link href="2021/04/21/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BD%AC%E7%A7%BB/"/>
      <url>2021/04/21/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BD%AC%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>待写</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习笔记</title>
      <link href="2021/04/12/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/04/12/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="对结果进行分类"><a href="#对结果进行分类" class="headerlink" title="对结果进行分类"></a>对结果进行分类</h3><p>采用one-hot编码，该字节里，仅容许单一位元为1，其他位元都必须为0</p><p>比如0-9数字识别</p><blockquote><p>结果为1，那么只有1对应的输出元为1，其他为0</p><p>结果为2，那么只有2对应的输出元为1，其他为0</p></blockquote><table><thead><tr><th></th><th>分类</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>目标</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr><tr><td>结果</td><td>0</td><td><strong>1</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>结果</td><td>0</td><td>0</td><td><strong>1</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h3 id="为图像打标签"><a href="#为图像打标签" class="headerlink" title="为图像打标签"></a>为图像打标签</h3><blockquote><p>轻度近视：mild myopia</p><p>中度近视：moderate myopia</p><p>重度近视：severe myopia</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Typora快捷使用个人记录</title>
      <link href="2021/04/11/Typora%E5%BF%AB%E6%8D%B7%E4%BD%BF%E7%94%A8%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95/"/>
      <url>2021/04/11/Typora%E5%BF%AB%E6%8D%B7%E4%BD%BF%E7%94%A8%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="Typora添加自定义快捷键"><a href="#Typora添加自定义快捷键" class="headerlink" title="Typora添加自定义快捷键"></a>Typora添加自定义快捷键</h3><p>比如需要添加插入代码块的快捷键，打开偏好设置，在通用设置里找到高级设置，会自动打开一个文件夹</p><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210411173737.png" alt="image-20210411173737448"></p><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210411173859.png" alt="image-20210411173831872"></p><p>打开<code>conf.user.json</code>文件，在keyBinding处添加想要的快捷键即可</p><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210411173923.png" alt="image-20210411173923720"></p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow文件读取流程</title>
      <link href="2021/04/11/tensorflow%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%B5%81%E7%A8%8B/"/>
      <url>2021/04/11/tensorflow%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="构造文件名队列"><a href="#构造文件名队列" class="headerlink" title="构造文件名队列"></a>构造文件名队列</h3><p>将需要读取的文件的文件名放入文件名队列</p><p><code>tf.train.string_input_producer(string_tensor,shuffle=True)</code></p><ul><li>string_tensor：含有文件名+路径的1阶张量</li></ul><ul><li>num_epochs：过几遍数据，默认无限过数据</li></ul><ul><li>return 文件队列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_queue=tf.train.string_input_producer(string_tensor,shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="读取与解码"><a href="#读取与解码" class="headerlink" title="读取与解码"></a>读取与解码</h3><blockquote><p>文本文件</p><p>读取： <code>tf.TextLineReader()</code></p><p>解码：<code>tf.decode_csv()</code></p></blockquote><blockquote><p>图片</p><p>读取： <code>tf.WholeFileReader()</code></p><p>解码：</p><p>​    <code>tf.image.decode_jpeg(contents)</code>将JPEG图像解码为uint8张量(理解为向量)，返回uint8张量，3-D形状(height,width,channels)——图片长度、宽度、通道数</p><p>​    <code>tf.image.decode_png(contents)</code>PNG图像</p></blockquote><blockquote><p>二进制</p><p>读取：<code>tf.FixedLengthRecordReader(record_bytes)</code></p><ul><li>record_bytes：整型，制定每次读取的字节数</li><li>return：读取器实例</li></ul><p>解码：<code>tf.decode_raw</code></p></blockquote><p>TFRecords文件：<code>tf.TFRecordReader()</code></p><p>key,value=读取器：<code>read(file_queue)</code></p><ul><li>key：文件名</li><li>value：一个样本</li></ul><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.train.batch(tensors,batch_size,num_threads=<span class="number">1</span>,capacity=<span class="number">32</span>,name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><blockquote><p>读取指定大小的张量</p><p>tensors：可以使包含张量的列表，批处理的内容放到列表当中</p><p>batch_size：从队列中读取的批处理大小</p><p>num_threads：进入队列的线程数</p><p>capacity：整数，队列中元素的最大数量</p><p>return：tensors</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.train.shuffle_batch</span><br></pre></td></tr></table></figure><h3 id="线程操作"><a href="#线程操作" class="headerlink" title="线程操作"></a>线程操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.train.start_queue_runners(sess=<span class="literal">None</span>,coord=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><blockquote><p>收集途中所有的队列线程</p><p>sess：所在的会话</p><p>coord：线程协调器</p><p>return：返回所有线程</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.train.Coordinator()</span><br></pre></td></tr></table></figure><blockquote><p>request_stop()：请求停止</p><p>should_stop()：询问是否结束</p><p>join(threads=None,stop_grace_period_secs=120)：回收线程</p><p>return：线程协调员实例</p></blockquote><p>举例：从文件夹中读取图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow.compat.v1 <span class="keyword">as</span> tf</span><br><span class="line">tf.compat.v1.disable_eager_execution()</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">picture_read</span>(<span class="params">file_list</span>):</span></span><br><span class="line">    <span class="comment"># 图片读取实现</span></span><br><span class="line">    <span class="comment"># 1.构造文件名队列</span></span><br><span class="line">    file_queue=tf.train.string_input_producer(file_list)</span><br><span class="line">    <span class="comment"># file_queue=tf.data.Dataset.from_tensor_slices(file_list)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.读取与解码</span></span><br><span class="line">    reader=tf.WholeFileReader()</span><br><span class="line">    <span class="comment"># key文件名 value一张图片的原始编码形式</span></span><br><span class="line">    key,value=reader.read(file_queue)</span><br><span class="line">    print(<span class="string">&quot;key:&quot;</span>,key)</span><br><span class="line">    print(<span class="string">&quot;value:&quot;</span>,value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解码阶段</span></span><br><span class="line">    image=tf.image.decode_jpeg(value)</span><br><span class="line">    print(<span class="string">&quot;image:&quot;</span>,image)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.批处理</span></span><br><span class="line">    <span class="comment"># 开启会话</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment"># 开启线程</span></span><br><span class="line">        coord=tf.train.Coordinator()</span><br><span class="line">        threads=tf.train.start_queue_runners(sess=sess,coord=coord)</span><br><span class="line"></span><br><span class="line">        key_new,value_new,image_new=sess.run([key,value,image])</span><br><span class="line">        print(<span class="string">&quot;key_new&quot;</span>,key_new)</span><br><span class="line">        print(<span class="string">&quot;value_new&quot;</span>,value_new)</span><br><span class="line">        print(<span class="string">&quot;image_new&quot;</span>,image_new)</span><br><span class="line">        <span class="comment"># 回收线程</span></span><br><span class="line">        coord.request_stop()</span><br><span class="line">        coord.join(threads)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    filename = os.listdir(<span class="string">&quot;D:\Desktop\data&quot;</span>)</span><br><span class="line">    <span class="comment"># print(filename)</span></span><br><span class="line">    <span class="comment"># 拼接&quot;路径+文件名&quot;</span></span><br><span class="line">    file_list=[os.path.join(<span class="string">&quot;D:\Desktop\data&quot;</span>,file) <span class="keyword">for</span> file <span class="keyword">in</span> filename]</span><br><span class="line">    print(file_list)</span><br><span class="line">    picture_read(file_list)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见小型观赏鱼记录</title>
      <link href="2021/04/10/%E5%B8%B8%E8%A7%81%E5%B0%8F%E5%9E%8B%E8%A7%82%E8%B5%8F%E9%B1%BC%E8%AE%B0%E5%BD%95/"/>
      <url>2021/04/10/%E5%B8%B8%E8%A7%81%E5%B0%8F%E5%9E%8B%E8%A7%82%E8%B5%8F%E9%B1%BC%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>最近开了一个50缸，养了几条小型鱼，顺带记录一下这些养过的鱼的外形和习性</p><h3 id="鳑鲏-pang-pi-鱼"><a href="#鳑鲏-pang-pi-鱼" class="headerlink" title="鳑鲏(pang pi)鱼"></a>鳑鲏(pang pi)鱼</h3><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210410231757.png" alt="Screenshot_20210410_230319_com.taobao.taobao"></p><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210411001932.jpg" alt="-1722064228"></p><p>体型：5-10厘米</p><p>性格：温和</p><p>寿命：最长4-5年</p><p>类型：冷水鱼</p><p>适宜温度：14-28℃</p><p>食性：杂食性鱼类，食物以藻类为主，一般摄食硅藻及其它藻类、碎屑，少量的枝角类和桡足类。也可摄食水草、高等植物的叶片、藻类、沉淀的有机物、浮游动物、水生昆虫。</p><p>繁殖：鳑鲏鱼的繁殖需要河蚌。</p><p>注意：鳑鲏鱼在比较暗的环境中会更容易发色，在白色背景的鱼缸中，容易形成保护色。</p><h3 id="一道眉人鱼"><a href="#一道眉人鱼" class="headerlink" title="一道眉人鱼"></a>一道眉人鱼</h3><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210416120324.png" alt="image-20210416120317266"></p><p>体型：成鱼14-15厘米</p><p>性格：温和</p><p>寿命：5年</p><p>适宜温度：22-25℃</p>]]></content>
      
      
      <categories>
          
          <category> 养鱼相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown编辑器本地图片上传到图床，解决文章上传到博客无法显示图片的问题</title>
      <link href="2021/04/06/markdown%E7%BC%96%E8%BE%91%E5%99%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%88%B0%E5%9B%BE%E5%BA%8A%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%87%E7%AB%A0%E4%B8%8A%E4%BC%A0%E5%88%B0%E5%8D%9A%E5%AE%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2021/04/06/markdown%E7%BC%96%E8%BE%91%E5%99%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%88%B0%E5%9B%BE%E5%BA%8A%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%87%E7%AB%A0%E4%B8%8A%E4%BC%A0%E5%88%B0%E5%8D%9A%E5%AE%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>使用Typora编写文章上传到博客时，在Typora中插入图片，图片默认保存在本地路径，如果直接上传文章到博客，由于图片路径是本地绝对路径，在博客中图片是不会显示的，所以这篇博客使用Typora+github+PicGo解决这个问题</p><h3 id="首先前往github注册一个账号并创建一个仓库"><a href="#首先前往github注册一个账号并创建一个仓库" class="headerlink" title="首先前往github注册一个账号并创建一个仓库"></a>首先前往<a href="https://github.com/">github</a>注册一个账号并创建一个仓库</h3><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210406202635.png" alt="image-20210406202635060"></p><p>给你的仓库取一个名字，然后点击Create repository即可完成创建仓库</p><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210406191922.png" alt="image-20210406191921913"></p><p>完成之后，就需要获取个人token，点击个人头像，前往设置，点击左侧<code>Developer settings</code>，选择<code>Personal access tokens</code>，复制保存生成的那一串字符，马上会用到</p><h3 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a><a href="https://molunerfinn.com/PicGo/">下载PicGo</a></h3><p>下载完成之后直接安装，然后进入图床设置，选择GitHub图床，仓库名格式是“github用户名/仓库名”，分支名一般默认是main，将上一步得到的token粘贴到设置token里面，存储路径默认img/即可，也可根据需要自行设置</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210406192856.png" alt="image-20210406192856798" style="zoom:50%;" /><p>完成之后，还需要进入PicGo设置，将时间戳重命名打开，这一步骤是为了避免上传图片的时候产生名称冲突</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210406202340.png" alt="image-20210406202340385" style="zoom:50%;" /><h3 id="下载Typora"><a href="#下载Typora" class="headerlink" title="下载Typora"></a>下载Typora</h3><p>安装好之后，点击文件，选择偏好设置，选择图像，按照下图进行设置</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210406193305.png" alt="image-20210406193305099" style="zoom:50%;" /><p>PicGo路径选择你安装PicGo的路径中的PicGo.exe文件，设置完成之后，点击验证图片上传选项，出现下图就代表可以愉快的在typora插入图片并上传了！</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210406193550.png" alt="image-20210406193550279" style="zoom: 50%;" /><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p>验证图片上传成功，但是在typora中插入图片，无法显示，前往github仓库中，发现图片上传成功，但是无法查看</p><p>原因：github屏蔽掉了图片</p><p>解决方法：修改hosts文件，前往</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\W</span>indows<span class="symbol">\S</span>ystem32<span class="symbol">\d</span>rivers<span class="symbol">\e</span>tc<span class="symbol">\h</span>osts</span><br></pre></td></tr></table></figure><p>用记事本打开hosts文件，在后面添加下面的代码，如果显示没有权限，那就把hosts文件复制到其他位置，将代码粘贴进去，然后把修改后的hosts文件粘贴到原位置进行覆盖即可</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># GitHub Start </span><br><span class="line"><span class="number">140.82.113.3</span>      github.com</span><br><span class="line"><span class="number">140.82.114.20</span>     gist.github.com</span><br><span class="line"><span class="number">151.101.184.133</span>    assets-cdn.github.com</span><br><span class="line"><span class="number">151.101.184.133</span>    raw.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    gist.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    cloud.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    camo.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    avatars0.githubusercontent.com</span><br><span class="line"><span class="number">199.232.68.133</span>     avatars0.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>     avatars1.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    avatars1.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    avatars2.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>     avatars2.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    avatars3.githubusercontent.com</span><br><span class="line"><span class="number">199.232.68.133</span>     avatars3.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    avatars4.githubusercontent.com</span><br><span class="line"><span class="number">199.232.68.133</span>     avatars4.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    avatars5.githubusercontent.com</span><br><span class="line"><span class="number">199.232.68.133</span>     avatars5.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    avatars6.githubusercontent.com</span><br><span class="line"><span class="number">199.232.68.133</span>     avatars6.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    avatars7.githubusercontent.com</span><br><span class="line"><span class="number">199.232.68.133</span>     avatars7.githubusercontent.com</span><br><span class="line"><span class="number">151.101.184.133</span>    avatars8.githubusercontent.com</span><br><span class="line"><span class="number">199.232.68.133</span>     avatars8.githubusercontent.com</span><br><span class="line"># GitHub End</span><br></pre></td></tr></table></figure><h3 id="Typora插入的图片显示太大"><a href="#Typora插入的图片显示太大" class="headerlink" title="Typora插入的图片显示太大"></a>Typora插入的图片显示太大</h3><p>首先查看自己当前Typora使用的是什么主题</p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422135619.png" alt="image-20210422135619169" style="zoom:50%;" /><p>前往Typora安装目录，搜索<code>github.css</code>，在最后加上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">zoom: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210422135915.png" alt="image-20210422135915417"></p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo-admin插件实现文章在线可视化编辑和部署的相关问题(持续更新)</title>
      <link href="2021/03/18/hexo-admin%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%83%A8%E7%BD%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>2021/03/18/hexo-admin%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%83%A8%E7%BD%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>由于部署的是静态页面，每次更新文章都只能通过<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>三连进行重新部署，很是不方便，这里采用<code>hexo-admin</code>插件实现文章的可视化编辑和部署。 </p><p>出现的问题：<code>deploy Error: spawn UNKNOWN</code> </p><p>前往<code>D:\Blog\node_modules\hexo-admin</code>打开<code>deploy.js</code>，将</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var proc = spawn(<span class="keyword">command</span>, [<span class="keyword">message</span>], &#123;detached: <span class="keyword">true</span>&#125;);</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var proc = spawn((<span class="name">process</span>.platform === <span class="string">&quot;win32&quot;</span> ? <span class="string">&quot;hexo.cmd&quot;</span> : <span class="string">&quot;hexo&quot;</span>), [&#x27;d&#x27;, &#x27;-g&#x27;])<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>然后在需要部署的时候，前往博客目录右键Git Bush Here</p><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210406194341.png" alt="image-20210406194341766"></p><p>输入<code>hexo s</code>，打开<a href="http://localhost:4000/admin">http://localhost:4000/admin</a> 重新部署即可</p><p>部署完成之后，使用<code>ctrl+c</code>退出</p><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>win10安装tensorflow并配置到pycharm</title>
      <link href="2021/03/16/win10%E5%AE%89%E8%A3%85tensorflow%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%88%B0pycharm/"/>
      <url>2021/03/16/win10%E5%AE%89%E8%A3%85tensorflow%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%88%B0pycharm/</url>
      
        <content type="html"><![CDATA[<p>最近安装tensorflow进行学习，在安装过程中有一些小问题，在这里记录一下安装过程，以便需要的时候再看，也希望能给大家提供一些帮助</p><h2 id="1-首先前往官网下载Anaconda"><a href="#1-首先前往官网下载Anaconda" class="headerlink" title="1. 首先前往官网下载Anaconda"></a>1. 首先前往<a href="https://www.anaconda.com/products/individual">官网</a>下载Anaconda</h2><p>根据自己的需要下载对应的版本</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f3fe768c7e9416da1b8fa0c91da6fcf~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>在安装过程中要注意将anaconda添加到环境变量</p><h2 id="2-然后在命令行中检查是否安装成功"><a href="#2-然后在命令行中检查是否安装成功" class="headerlink" title="2. 然后在命令行中检查是否安装成功"></a>2. 然后在命令行中检查是否安装成功</h2><p><code>conda --version</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc3731807469400db9c217772537e835~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="3-选择合适的python版本进行安装"><a href="#3-选择合适的python版本进行安装" class="headerlink" title="3. 选择合适的python版本进行安装"></a>3. 选择合适的python版本进行安装</h2><p>打开刚刚安装的<code>Anaconda Prompt</code>输入</p><p><code>conda create --name tensorflow python=3.8.5</code><br>//这里的版本根据自己的需要</p><h2 id="4-安装tensorflow以及可能出现的问题"><a href="#4-安装tensorflow以及可能出现的问题" class="headerlink" title="4. 安装tensorflow以及可能出现的问题"></a>4. 安装tensorflow以及可能出现的问题</h2><p><strong>方式一：</strong><br>到<a href="https://pypi.org/project/tensorflow/2.3.0/#files">官网</a>去下载tensorflow </p><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210409173213.png" alt="image-20210409173213858"></p><p>根据自己的操作系统和python版本选择相应的版本，其中cp38指的是最高支持python3.8，我是windows系统，我选择的是支持python3.8版本的tensorflow2.3.0，如果该方式下载太慢，可以使用方式二进行下载  </p><p><strong>方式二：到<a href="https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/tensorflow/">tensorflow清华镜像</a>下载对应的tensorflow版本</strong>  </p><p>下载好了之后，打开Anaconda Prompt，cd到下载文件的文件夹，输入以下代码：//文件名根据自己下载的版本来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-<span class="number">2.3</span><span class="number">.0</span>-cp38-cp38-win_amd64.whl</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SeanLanX/Images/main/img/20210409165438.png" alt="image-20210409165431657"></p><h3 id="安装过程中出现的一些错误"><a href="#安装过程中出现的一些错误" class="headerlink" title="安装过程中出现的一些错误"></a>安装过程中出现的一些错误</h3><p><strong>错误1:</strong><br><code>ERROR: spyder 4.1.5 requires pyqt5&lt;5.13; python_version &gt;= &quot;3&quot;, which is not installed.</code><br><code>spyder 4.1.5 requires pyqtwebengine&lt;5.13; python_version &gt;= &quot;3&quot;, which is not installed.</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/109735adc45349158ba60de9b3bc8425~tplv-k3u1fbpfcp-watermark.image" alt="image.png">  </p><p><strong>解决方法：</strong><br>将以下两行代码分别输入到命令行中执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install  --user pyqtwebengine==<span class="number">5.12</span> --use-feature=<span class="number">2020</span>-resolver</span><br><span class="line">pip install  --user pyqt5==<span class="number">5.12</span> --use-feature=<span class="number">2020</span>-resolver</span><br></pre></td></tr></table></figure><h2 id="5-测试tensorflow安装结果"><a href="#5-测试tensorflow安装结果" class="headerlink" title="5. 测试tensorflow安装结果"></a>5. 测试tensorflow安装结果</h2><p><strong>在Anaconda Prompt中</strong>输入<code>activate tensorflow</code>进入tensorflow环境，然后输入<code>python</code><br>进入python环境后，输入以下代码测试安装是否成功（以下代码不适用于tensorflow2.0及以后的版本）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">sess = tf.Session()</span><br><span class="line">a = tf.constant(<span class="number">1</span>)</span><br><span class="line">b= tf.constant(<span class="number">2</span>)</span><br><span class="line">sess.run(a+b)</span><br></pre></td></tr></table></figure><p>如果能输出结果则表示安装成功  </p><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p><code>RuntimeError: The Session graph is empty.  Add operations to the graph before calling run().</code> </p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在tensorflow2.0以后，默认开启了eager execution，要调用Session()需要先禁用eager execution，在自己的代码前面输入<code>tf.compat.v1.disable_eager_execution()</code>就成功的禁用了eager execution，然后就可以使用<code>sess = tf.compat.v1.Session()</code>来调用Session()了，以下是测试的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.compat.v1.disable_eager_execution()</span><br><span class="line">hello=tf.constant(<span class="string">&#x27;hello,tensorflow&#x27;</span>)</span><br><span class="line">sess=tf.compat.v1.Session()</span><br><span class="line">print(sess.run(hello))</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8e5c5fdefb24e71921ac0503e4cdc62~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>输出结果表示安装成功</p><h2 id="6-配置到pycharm"><a href="#6-配置到pycharm" class="headerlink" title="6. 配置到pycharm"></a>6. 配置到pycharm</h2><p>打开pycharm，创建一个工程，点击File-&gt;Settings-&gt;Project:Project_name-&gt;Python Interpreter<br>点击右侧Add按钮，选择tensorflow环境中的python.exe解释器</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0843ffdfa5645cd8836a05d07855d34~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf55b1e5f593498aaaf78856383a5a8e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>然后就可以输入代码进行测试，步骤同上一步，然后就完成了设置</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
